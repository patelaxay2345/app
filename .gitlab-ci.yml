# GitLab CI/CD Pipeline for JobTalk Admin Dashboard
# Supports both production (main branch) and dev environments

stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
  DOCKER_LATEST: ${CI_REGISTRY_IMAGE}:latest

# Build Docker image and push to GitLab Container Registry
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $DOCKER_IMAGE -t $DOCKER_LATEST .
    - echo "Pushing to GitLab Container Registry..."
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_LATEST
  only:
    - main
    - dev
  tags:
    - docker

# Deploy to Production (main branch)
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$LINODE_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $LINODE_SSH_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production server..."
    - |
      ssh $LINODE_SSH_USER@$LINODE_SSH_HOST bash << 'ENDSSH'
        set -e
        cd /opt/jobtalk-admin || exit 1
        
        echo "Pulling latest code..."
        git fetch origin
        git checkout main
        git pull origin main
        
        echo "Logging into GitLab Container Registry..."
        echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}
        
        echo "Pulling Docker image..."
        docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:latest
        
        echo "Creating production environment file..."
        cat > .env.production << 'ENVFILE'
      CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}
      IMAGE_TAG=latest
      MONGO_URL=${MONGO_URL_PROD}
      DB_NAME=recruitment_admin_prod
      JWT_SECRET=${JWT_SECRET_PROD}
      JWT_ALGORITHM=HS256
      JWT_EXPIRY_HOURS=8
      ENCRYPTION_KEY=${ENCRYPTION_KEY_PROD}
      APP_NAME=JobTalk
      AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      AWS_REGION=us-east-1
      SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
      NODE_ENV=production
      PORT=8001
      CORS_ORIGINS=${CORS_ORIGINS_PROD}
      ENVFILE
        
        echo "Starting services..."
        docker-compose -f docker-compose.prod.yml --env-file .env.production down || true
        docker-compose -f docker-compose.prod.yml --env-file .env.production up -d
        
        echo "Cleaning up old images..."
        docker image prune -af --filter "until=72h" || true
        
        echo "Waiting for application to be healthy..."
        sleep 10
        for i in {1..30}; do
          if curl -f http://localhost/health > /dev/null 2>&1; then
            echo "Application is healthy!"
            exit 0
          fi
          echo "Waiting for health check... ($i/30)"
          sleep 2
        done
        
        echo "Health check failed!"
        docker-compose -f docker-compose.prod.yml logs --tail=50
        exit 1
      ENDSSH
  environment:
    name: production
    url: https://jobtalk-admin.yourdomain.com
  only:
    - main
  tags:
    - docker
  when: manual

# Deploy to Development (dev branch)
deploy_dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$LINODE_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $LINODE_SSH_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to development server..."
    - |
      ssh $LINODE_SSH_USER@$LINODE_SSH_HOST bash << 'ENDSSH'
        set -e
        cd /opt/jobtalk-admin || exit 1
        
        echo "Pulling latest code..."
        git fetch origin
        git checkout dev
        git pull origin dev
        
        echo "Logging into GitLab Container Registry..."
        echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}
        
        echo "Pulling Docker image..."
        docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:dev
        
        echo "Creating development environment file..."
        cat > .env.dev << 'ENVFILE'
      CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}
      IMAGE_TAG=dev
      MONGO_URL=${MONGO_URL_DEV}
      DB_NAME=recruitment_admin_dev
      JWT_SECRET=${JWT_SECRET_DEV}
      JWT_ALGORITHM=HS256
      JWT_EXPIRY_HOURS=8
      ENCRYPTION_KEY=${ENCRYPTION_KEY_DEV}
      APP_NAME=JobTalk-Dev
      AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      AWS_REGION=us-east-1
      SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
      NODE_ENV=development
      PORT=8001
      CORS_ORIGINS=${CORS_ORIGINS_DEV}
      ENVFILE
        
        echo "Starting services..."
        docker-compose -f docker-compose.dev.yml --env-file .env.dev down || true
        docker-compose -f docker-compose.dev.yml --env-file .env.dev up -d
        
        echo "Cleaning up old images..."
        docker image prune -af --filter "until=72h" || true
        
        echo "Waiting for application to be healthy..."
        sleep 10
        for i in {1..30}; do
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "Application is healthy!"
            exit 0
          fi
          echo "Waiting for health check... ($i/30)"
          sleep 2
        done
        
        echo "Health check failed!"
        docker-compose -f docker-compose.dev.yml logs --tail=50
        exit 1
      ENDSSH
  environment:
    name: development
    url: http://dev.jobtalk-admin.yourdomain.com
  only:
    - dev
  tags:
    - docker
